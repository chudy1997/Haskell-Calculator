
==================== FINAL INTERFACE ====================
2017-01-17 00:19:36.9029 UTC

interface calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ:ParsingFunctions 8001
  interface hash: bf70b5564e1be4df7cac9777435dda98
  ABI hash: 1ec712e8bae8962e11ba56cfadd7522b
  export-list hash: 041aabb93aec91404f895c0b1ae6e7f9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  ParsingFunctions.d
  ParsingFunctions.e
  ParsingFunctions.isNumber
  ParsingFunctions.sign
module dependencies: BasicDerivatives
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  BasicDerivatives 857a0917d6805129d904585615d5649b
  exports: 0f7b8b43f56912e4241cd2bfb4002737
  aToX add10ddae0cd81b9e2798e08fa9a162a
  acos' 63df19505514b5bb3cec93441754eb0d
  acosh' b4e22173c324ddaedc5bfcfe45bf5d03
  acot ff48d0e535a1b49c22d5892f8a602582
  acoth 466d91a1e166bc627e46d9b325999e54
  acsc 545d3fbc0c990d06f98c3e31932c33d4
  acsch f6896668d3b8bfcb4c98d621bfee0ddf
  asec 51eae852c1d33c7106343dca6a4a190c
  asech 0ed933906a65a3788664b5f6a56df552
  asin' fbca9cd467f913ede5f832abc0c34676
  asinh' 2f9d14bb1fea4f46c35e7f6bceab6f17
  atan' 11aed03bc73bde5d535acf86d1b096f8
  atanh' 2265e5135381148d51501d8d19255963
  cos' f3a4e8fa0a8abd6877a3b4f216c5ed94
  cosh' 35516a6742bfc411ef52bddf24e77d9c
  cot 5d037efdd607af6b161fcc75a8273251
  coth 8096c18a76936c5e9ae0ecc092acb875
  csc eba81120de69ea5800673c15ac820724
  csch badf41bf30903cd42d2c198301ea8362
  daToX ab91c8c5d94404a5a2166221df97b25e
  dacos d8b7e81dbd781eafc4078b240de11e2a
  dacosh 0f6736ae7fb4498d6e0c880add97386b
  dacot 00758ed4c223a3bf7e8a78511e790beb
  dacoth bcf96e5d9acae6e831db6ec909723c62
  dacsc bd4154254167cf9a2fb454327d1588a0
  dacsch 95b6addd4bdc0436a6b03d11ebc8864b
  dasec 6e724fea62c807cacf0e654df5729a60
  dasech cbe22e3ddde53e66a2c594e34e7de419
  dasin 893be7f295b1167aec6d5aba8b5de893
  dasinh ebe127a70e6b8db930877878779ea650
  datan 107a1dcb123e955d61901e43bd7d3c82
  datanh 9aee0ce50209182abceb7c87ab7f3b49
  dc c57c80c534b1ebc1dc10518f38b3b58e
  dcos 75aa2eb2cf6a1a01fe844f6f77d66a65
  dcosh ce7950d88aa458d6dddea17bdfedeb48
  dcot a1e8c16d2fdd9ae16ffc6cdeb2e718e5
  dcoth 92cd5c06f667ef8593e2c4bb09710dd1
  dcsc 5371b43d8870f3bcc629b73fa93ab3b4
  dcsch fa8b17a67e6d2a9627a147624c1a788d
  dexp 0b1d2aa7e48dfa051bb716fdd2998449
  dlog 3237ba1a131a17b714630ed563dc902a
  dloga 655c90ca8d593730293f186ad4ecbce3
  dsec f0019888ccb6e6c5bca159ec1a8c0213
  dsech 5fa5a757799fed1c2f47864e565cefb6
  dsin 2e1613d330a5a28dce3ff5081f8abc29
  dsinh 40399d60158f78d52c549bb9d4208624
  dtan 49990bbac8cdfbab9b80a86ee8225783
  dtanh de56c74989a30410cd17a520f55e29ee
  dxToN db7112b49f7ead1e31d2a91af0af8296
  dxToX 476fa3d400e8a514c64dbb698f1ebedf
  exp' 401805c869eae33a9062b02f04bc4054
  log' 9536904f3534ea74a0160d3191c65ef1
  loga 8647a80415fed3a9029e64ab2b77efbc
  sec 4e4dd3d88ee412cdb4421fce57d0b6a2
  sech 59ccf5b8f9ab16fb3f210462f1994a6f
  sin' cdc3c93fbcd751a44721285014f9677a
  sinh' fb4e8ef8f491041ad1905d8d14d9c334
  tan' 691bac2138d53096a75a8ad11430ff7c
  tanh' d4dd552afca99b06a923222116eeb83f
  xToN 93ea061bb2b9b780a140e05d3e0ede77
  xToX ee85c540a0dec9261c48b441e6a1b0d0
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
b6d40fde94f06d3d8fb81bce72ed15ae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ParsingFunctions.$trModule2
                   ParsingFunctions.$trModule1) -}
d53f8cdead3a47c6fb5fe1093b073496
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ParsingFunctions"#) -}
a39fa30bd5e59a985d573353a3db7a78
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ"#) -}
a2ec300c59a1020faad8efbc2da0b7d5
  $wsign ::
    [GHC.Types.Char]
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Prim.Double#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Char])
                   (w1 :: GHC.Types.Double)
                   (w2 :: GHC.Types.Double) ->
                 case w of wild {
                   [] -> 0.0##
                   : ds ds1
                   -> case ds of wild1 { GHC.Types.C# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> 0.0##
                        '*'#
                        -> case ds1 of wild2 {
                             []
                             -> case w1 of wild3 { GHC.Types.D# x ->
                                case w2 of wild4 { GHC.Types.D# y -> GHC.Prim.*## x y } }
                             : ipv ipv1 -> 0.0## }
                        '+'#
                        -> case ds1 of wild2 {
                             []
                             -> case w1 of wild3 { GHC.Types.D# x ->
                                case w2 of wild4 { GHC.Types.D# y -> GHC.Prim.+## x y } }
                             : ipv ipv1 -> 0.0## }
                        '-'#
                        -> case ds1 of wild2 {
                             []
                             -> case w1 of wild3 { GHC.Types.D# x ->
                                case w2 of wild4 { GHC.Types.D# y -> GHC.Prim.-## x y } }
                             : ipv ipv1 -> 0.0## }
                        '/'#
                        -> case ds1 of wild2 {
                             []
                             -> case w1 of wild3 { GHC.Types.D# x ->
                                case w2 of wild4 { GHC.Types.D# y -> GHC.Prim./## x y } }
                             : ipv ipv1 -> 0.0## } } } }) -}
01fb60fa5bd4cbdfe2043dfbc33aa47d
  d ::
    [GHC.Types.Char]
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, Strictness: <S,U><L,U(U)>,
     Unfolding: (\ (f :: [GHC.Types.Char]) (a :: GHC.Types.Double) ->
                 case ParsingFunctions.isNumber f of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString f ParsingFunctions.d59 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString f ParsingFunctions.d58 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString f ParsingFunctions.d57 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString f ParsingFunctions.d56 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString f ParsingFunctions.d55 of wild5 {
                                            GHC.Types.False
                                            -> case GHC.Base.eqString
                                                      f
                                                      ParsingFunctions.d54 of wild6 {
                                                 GHC.Types.False
                                                 -> case GHC.Base.eqString
                                                           f
                                                           ParsingFunctions.d53 of wild7 {
                                                      GHC.Types.False
                                                      -> case GHC.Base.eqString
                                                                f
                                                                ParsingFunctions.d52 of wild8 {
                                                           GHC.Types.False
                                                           -> case GHC.Base.eqString
                                                                     f
                                                                     ParsingFunctions.d51 of wild9 {
                                                                GHC.Types.False
                                                                -> case GHC.Base.eqString
                                                                          f
                                                                          ParsingFunctions.d50 of wild10 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Base.eqString
                                                                               f
                                                                               ParsingFunctions.d49 of wild11 {
                                                                          GHC.Types.False
                                                                          -> case GHC.Base.eqString
                                                                                    f
                                                                                    ParsingFunctions.d48 of wild12 {
                                                                               GHC.Types.False
                                                                               -> case GHC.Base.eqString
                                                                                         f
                                                                                         ParsingFunctions.d47 of wild13 {
                                                                                    GHC.Types.False
                                                                                    -> case GHC.Base.eqString
                                                                                              f
                                                                                              ParsingFunctions.d46 of wild14 {
                                                                                         GHC.Types.False
                                                                                         -> case GHC.Base.eqString
                                                                                                   f
                                                                                                   ParsingFunctions.d45 of wild15 {
                                                                                              GHC.Types.False
                                                                                              -> case GHC.Base.eqString
                                                                                                        f
                                                                                                        ParsingFunctions.d44 of wild16 {
                                                                                                   GHC.Types.False
                                                                                                   -> case GHC.Base.eqString
                                                                                                             f
                                                                                                             ParsingFunctions.d43 of wild17 {
                                                                                                        GHC.Types.False
                                                                                                        -> case GHC.Base.eqString
                                                                                                                  f
                                                                                                                  ParsingFunctions.d42 of wild18 {
                                                                                                             GHC.Types.False
                                                                                                             -> case GHC.Base.eqString
                                                                                                                       f
                                                                                                                       ParsingFunctions.d41 of wild19 {
                                                                                                                  GHC.Types.False
                                                                                                                  -> case GHC.Base.eqString
                                                                                                                            f
                                                                                                                            ParsingFunctions.d40 of wild20 {
                                                                                                                       GHC.Types.False
                                                                                                                       -> case GHC.Base.eqString
                                                                                                                                 f
                                                                                                                                 ParsingFunctions.d39 of wild21 {
                                                                                                                            GHC.Types.False
                                                                                                                            -> case GHC.Base.eqString
                                                                                                                                      f
                                                                                                                                      ParsingFunctions.d38 of wild22 {
                                                                                                                                 GHC.Types.False
                                                                                                                                 -> case GHC.Base.eqString
                                                                                                                                           f
                                                                                                                                           ParsingFunctions.d37 of wild23 {
                                                                                                                                      GHC.Types.False
                                                                                                                                      -> case GHC.Base.eqString
                                                                                                                                                f
                                                                                                                                                ParsingFunctions.d36 of wild24 {
                                                                                                                                           GHC.Types.False
                                                                                                                                           -> case GHC.Base.eqString
                                                                                                                                                     f
                                                                                                                                                     ParsingFunctions.d35 of wild25 {
                                                                                                                                                GHC.Types.False
                                                                                                                                                -> case GHC.Base.eqString
                                                                                                                                                          f
                                                                                                                                                          ParsingFunctions.d34 of wild26 {
                                                                                                                                                     GHC.Types.False
                                                                                                                                                     -> case GHC.Base.eqString
                                                                                                                                                               f
                                                                                                                                                               ParsingFunctions.d33 of wild27 {
                                                                                                                                                          GHC.Types.False
                                                                                                                                                          -> case GHC.Base.eqString
                                                                                                                                                                    f
                                                                                                                                                                    ParsingFunctions.d32 of wild28 {
                                                                                                                                                               GHC.Types.False
                                                                                                                                                               -> case GHC.Base.eqString
                                                                                                                                                                         f
                                                                                                                                                                         ParsingFunctions.d31 of wild29 {
                                                                                                                                                                    GHC.Types.False
                                                                                                                                                                    -> case GHC.Base.eqString
                                                                                                                                                                              f
                                                                                                                                                                              ParsingFunctions.d30 of wild30 {
                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                         -> ParsingFunctions.d29
                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                         -> ParsingFunctions.d28 }
                                                                                                                                                                    GHC.Types.True
                                                                                                                                                                    -> BasicDerivatives.dxToN
                                                                                                                                                                         a }
                                                                                                                                                               GHC.Types.True
                                                                                                                                                               -> ParsingFunctions.d27 }
                                                                                                                                                          GHC.Types.True
                                                                                                                                                          -> ParsingFunctions.d26 }
                                                                                                                                                     GHC.Types.True
                                                                                                                                                     -> ParsingFunctions.d25 }
                                                                                                                                                GHC.Types.True
                                                                                                                                                -> ParsingFunctions.d24 }
                                                                                                                                           GHC.Types.True
                                                                                                                                           -> ParsingFunctions.d23 }
                                                                                                                                      GHC.Types.True
                                                                                                                                      -> ParsingFunctions.d22 }
                                                                                                                                 GHC.Types.True
                                                                                                                                 -> BasicDerivatives.dloga
                                                                                                                                      a }
                                                                                                                            GHC.Types.True
                                                                                                                            -> ParsingFunctions.d21 }
                                                                                                                       GHC.Types.True
                                                                                                                       -> ParsingFunctions.d20 }
                                                                                                                  GHC.Types.True
                                                                                                                  -> ParsingFunctions.d19 }
                                                                                                             GHC.Types.True
                                                                                                             -> ParsingFunctions.d18 }
                                                                                                        GHC.Types.True
                                                                                                        -> ParsingFunctions.d17 }
                                                                                                   GHC.Types.True
                                                                                                   -> ParsingFunctions.d16 }
                                                                                              GHC.Types.True
                                                                                              -> ParsingFunctions.d15 }
                                                                                         GHC.Types.True
                                                                                         -> ParsingFunctions.d14 }
                                                                                    GHC.Types.True
                                                                                    -> ParsingFunctions.d13 }
                                                                               GHC.Types.True
                                                                               -> ParsingFunctions.d12 }
                                                                          GHC.Types.True
                                                                          -> ParsingFunctions.d11 }
                                                                     GHC.Types.True
                                                                     -> ParsingFunctions.d10 }
                                                                GHC.Types.True
                                                                -> ParsingFunctions.d9 }
                                                           GHC.Types.True -> ParsingFunctions.d8 }
                                                      GHC.Types.True -> ParsingFunctions.d7 }
                                                 GHC.Types.True -> ParsingFunctions.d6 }
                                            GHC.Types.True -> ParsingFunctions.d5 }
                                       GHC.Types.True -> ParsingFunctions.d4 }
                                  GHC.Types.True -> ParsingFunctions.d3 }
                             GHC.Types.True -> ParsingFunctions.d2 }
                        GHC.Types.True -> BasicDerivatives.daToX a }
                   GHC.Types.True -> ParsingFunctions.d1 }) -}
9a9c0ca8ee4411eb866e3d13bb0666db
  d1 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: GHC.Types.Double) -> BasicDerivatives.dc1) -}
65359dea0df40e9ea1c8a58e84d156ed
  d10 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasin ww1 }) -}
7f00c222aa605e326f35fb762cc1274c
  d11 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.sqrtDouble#
                              (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1))) of wild2 { DEFAULT ->
                    GHC.Types.D# wild2 } })) -}
2c173e58c9d788cdf1c14005e947e3b4
  d12 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1)) of wild2 { DEFAULT ->
                    GHC.Types.D# wild2 } })) -}
666dde47706a146acbe922208517bfb4
  d13 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdatanh ww1 }) -}
09680bb1f91918760db7709aed55f254
  d14 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    GHC.Types.D#
                      (GHC.Prim.negateDouble# (GHC.Prim.sinDouble# x1)) })) -}
fda7b80b71d1f140652c8f18583f455a
  d15 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.sinhDouble x)) -}
9845c8cdf4186150289e961459c0e45e
  d16 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcot ww1 }) -}
dc51e31fd85e87dc3d887c89ceab4396
  d17 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcoth ww1 }) -}
5e77f21845285f9fe4b17a7efd751d0a
  d18 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (let {
                           x2 :: GHC.Prim.Double# = GHC.Prim.sinDouble# x1
                         } in
                         case GHC.Prim./##
                                (GHC.Prim.cosDouble# x1)
                                (GHC.Prim.*## x2 x2) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# wild2) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
e37c2b632212171314dfb50a019b91fd
  d19 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcsch ww1 }) -}
f6ef8c4fa12c7975d5f304f2c3bc6f9b
  d2 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacos ww1 }) -}
963164bddc30b77efb94a78b61ccffcd
  d20 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.expDouble x)) -}
d1bf88ca0736865ba69f423d852de916
  d21 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) } }) -}
abe1119ea4e12568b2d1ce759545dff0
  d22 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (let {
                           x2 :: GHC.Prim.Double# = GHC.Prim.cosDouble# x1
                         } in
                         case GHC.Prim./##
                                (GHC.Prim.sinDouble# x1)
                                (GHC.Prim.*## x2 x2) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
eda9e5a882293dedf2fa71f80c9d1201
  d23 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdsech ww1 }) -}
f78d1640400d246bdba878bc27e19c17
  d24 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.cosDouble x)) -}
e3557b05156ced1e0f568e3a07ce75a5
  d25 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.coshDouble x)) -}
f1f02b0a7c2bad489fc5d4f9a0dcfa31
  d26 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdtan ww1 }) -}
2bc1d6a380ad7978dddd340113f09e12
  d27 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case w1 of wild { GHC.Types.D# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.==## (GHC.Prim.coshDouble# x) 0.0##) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim./##
                                1.0##
                                (GHC.Prim.coshDouble# x) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.*## wild2 wild2) }
                      GHC.Types.True -> GHC.Types.D# 0.0## } })) -}
330f555939902a72cfeb6966a8bcbf36
  d28 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.logDouble# x1 of wild2 { DEFAULT ->
                         GHC.Types.D#
                           (GHC.Prim.*##
                              (GHC.Prim.**## x1 x1)
                              (GHC.Prim.+## 1.0## wild2)) }) } }) -}
1e5f5edc87291cf7ae00795d0143a6aa
  d29 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (e27 :: GHC.Types.Double) ->
                 GHC.Base.Nothing @ GHC.Types.Double) -}
e6b31953e949100e1e27e3ebc5446c68
  d3 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacosh ww1 }) -}
1df3a06f5a10a4ecb3a54519804f1e6a
  d30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xToX"#) -}
35198eab4f081649c2f9b68b442c3ff5
  d31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xToN"#) -}
e2b74f4d3f95f722a6c861758a5cef0f
  d32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tanh"#) -}
0a3471f2215777afffc8fc73f196da36
  d33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tan"#) -}
d885533f0fa0deaa1033ae19bba30ffd
  d34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sinh"#) -}
e7ab90ef1ec05400f1762f81dda55468
  d35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sin"#) -}
443903cbcb233ee8caf87126c23005bb
  d36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sech"#) -}
43b3203f8f45167a9e76b5906e2737bc
  d37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sec"#) -}
b52b40c08d5a02a779dad62ff30e76be
  d38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "loga"#) -}
7ffd2d983c5b6b38724cc947a5eff8c4
  d39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "log"#) -}
35d25e32d4dcc0aca6fd0dcd3c35dee7
  d4 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1)) of wild2 { DEFAULT ->
                    GHC.Types.D# (GHC.Prim.negateDouble# wild2) } })) -}
cb6ed144a8a88e7d5497c05038379a25
  d40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exp"#) -}
0d7853b379ca4c5a47dfd81ef4dc62cd
  d41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "csch"#) -}
f36f968c9ed36c0e07ee6ecd93baddeb
  d42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "csc"#) -}
96880fe91c4891e8a25cd8eae9325a9f
  d43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "coth"#) -}
9859dbf52026427cddc5568ea0bfbffc
  d44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cot"#) -}
93d45e28163f6825f41c98deb50af9a4
  d45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cosh"#) -}
e67a3ca4f00b6443100976a58b580168
  d46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cos"#) -}
e26f3d386a14a757eb57f0175adcb53f
  d47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "atanh"#) -}
9ec0012b3098bcfd4a6dce084f97dfe0
  d48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "atan"#) -}
525901dbcf1679f98183099ff7872ede
  d49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asinh"#) -}
1062fd4691044ecb3b23cd887c0445c7
  d5 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacoth ww1 }) -}
67a90c2669222800c3557f30ca785b83
  d50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asin"#) -}
8005f36394ae47bedc6b9d4d2753e464
  d51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asech"#) -}
e90ee98c2800e1ee11ad2587ca7ab095
  d52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asec"#) -}
8f55394c8de13327b35e68b988290448
  d53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acsch"#) -}
555431f337eeb42c46122c65634f4623
  d54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acsc"#) -}
0ae0463b23f20de9b1872c516a103655
  d55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acoth"#) -}
7f040a6c4edcfe72fd40f7a170b6a1e2
  d56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acot"#) -}
386ee6c76474f2438aee00048ad4d77b
  d57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acosh"#) -}
36cb546f1c696c24f82cfe92bdb3f9e7
  d58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acos"#) -}
e7db6ddd7f6affcfd07f96571514f129
  d59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "aToX"#) -}
aa589e9b59e5708dc6f3c2758556142a
  d6 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacsc ww1 }) -}
fb2e832a82f1e487e9a900e0c3b9cdb4
  d7 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.*##
                                   x1
                                   (GHC.Prim.sqrtDouble#
                                      (GHC.Prim.+##
                                         1.0##
                                         (GHC.Prim.*## x1 x1)))) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# wild2) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
85782e2e822806cfcb749e0159b96a6c
  d8 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasec ww1 }) -}
a4672cea3abe4224fbc36bb1d400b7a9
  d9 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasech ww1 }) -}
10a6c1c93c230b0e5ea4424c787ce7ae
  e ::
    [GHC.Types.Char]
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, Strictness: <S,U><L,U(U)>,
     Unfolding: (\ (f :: [GHC.Types.Char]) (a :: GHC.Types.Double) ->
                 case ParsingFunctions.isNumber f of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString f ParsingFunctions.d59 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString f ParsingFunctions.d58 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString f ParsingFunctions.d57 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString f ParsingFunctions.d56 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString f ParsingFunctions.d55 of wild5 {
                                            GHC.Types.False
                                            -> case GHC.Base.eqString
                                                      f
                                                      ParsingFunctions.d54 of wild6 {
                                                 GHC.Types.False
                                                 -> case GHC.Base.eqString
                                                           f
                                                           ParsingFunctions.d53 of wild7 {
                                                      GHC.Types.False
                                                      -> case GHC.Base.eqString
                                                                f
                                                                ParsingFunctions.d52 of wild8 {
                                                           GHC.Types.False
                                                           -> case GHC.Base.eqString
                                                                     f
                                                                     ParsingFunctions.d51 of wild9 {
                                                                GHC.Types.False
                                                                -> case GHC.Base.eqString
                                                                          f
                                                                          ParsingFunctions.d50 of wild10 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Base.eqString
                                                                               f
                                                                               ParsingFunctions.d49 of wild11 {
                                                                          GHC.Types.False
                                                                          -> case GHC.Base.eqString
                                                                                    f
                                                                                    ParsingFunctions.d48 of wild12 {
                                                                               GHC.Types.False
                                                                               -> case GHC.Base.eqString
                                                                                         f
                                                                                         ParsingFunctions.d47 of wild13 {
                                                                                    GHC.Types.False
                                                                                    -> case GHC.Base.eqString
                                                                                              f
                                                                                              ParsingFunctions.d46 of wild14 {
                                                                                         GHC.Types.False
                                                                                         -> case GHC.Base.eqString
                                                                                                   f
                                                                                                   ParsingFunctions.d45 of wild15 {
                                                                                              GHC.Types.False
                                                                                              -> case GHC.Base.eqString
                                                                                                        f
                                                                                                        ParsingFunctions.d44 of wild16 {
                                                                                                   GHC.Types.False
                                                                                                   -> case GHC.Base.eqString
                                                                                                             f
                                                                                                             ParsingFunctions.d43 of wild17 {
                                                                                                        GHC.Types.False
                                                                                                        -> case GHC.Base.eqString
                                                                                                                  f
                                                                                                                  ParsingFunctions.d42 of wild18 {
                                                                                                             GHC.Types.False
                                                                                                             -> case GHC.Base.eqString
                                                                                                                       f
                                                                                                                       ParsingFunctions.d41 of wild19 {
                                                                                                                  GHC.Types.False
                                                                                                                  -> case GHC.Base.eqString
                                                                                                                            f
                                                                                                                            ParsingFunctions.d40 of wild20 {
                                                                                                                       GHC.Types.False
                                                                                                                       -> case GHC.Base.eqString
                                                                                                                                 f
                                                                                                                                 ParsingFunctions.d39 of wild21 {
                                                                                                                            GHC.Types.False
                                                                                                                            -> case GHC.Base.eqString
                                                                                                                                      f
                                                                                                                                      ParsingFunctions.d38 of wild22 {
                                                                                                                                 GHC.Types.False
                                                                                                                                 -> case GHC.Base.eqString
                                                                                                                                           f
                                                                                                                                           ParsingFunctions.d37 of wild23 {
                                                                                                                                      GHC.Types.False
                                                                                                                                      -> case GHC.Base.eqString
                                                                                                                                                f
                                                                                                                                                ParsingFunctions.d36 of wild24 {
                                                                                                                                           GHC.Types.False
                                                                                                                                           -> case GHC.Base.eqString
                                                                                                                                                     f
                                                                                                                                                     ParsingFunctions.d35 of wild25 {
                                                                                                                                                GHC.Types.False
                                                                                                                                                -> case GHC.Base.eqString
                                                                                                                                                          f
                                                                                                                                                          ParsingFunctions.d34 of wild26 {
                                                                                                                                                     GHC.Types.False
                                                                                                                                                     -> case GHC.Base.eqString
                                                                                                                                                               f
                                                                                                                                                               ParsingFunctions.d33 of wild27 {
                                                                                                                                                          GHC.Types.False
                                                                                                                                                          -> case GHC.Base.eqString
                                                                                                                                                                    f
                                                                                                                                                                    ParsingFunctions.d32 of wild28 {
                                                                                                                                                               GHC.Types.False
                                                                                                                                                               -> case GHC.Base.eqString
                                                                                                                                                                         f
                                                                                                                                                                         ParsingFunctions.d31 of wild29 {
                                                                                                                                                                    GHC.Types.False
                                                                                                                                                                    -> case GHC.Base.eqString
                                                                                                                                                                              f
                                                                                                                                                                              ParsingFunctions.d30 of wild30 {
                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                         -> ParsingFunctions.d29
                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                         -> ParsingFunctions.e26 }
                                                                                                                                                                    GHC.Types.True
                                                                                                                                                                    -> BasicDerivatives.xToN
                                                                                                                                                                         a }
                                                                                                                                                               GHC.Types.True
                                                                                                                                                               -> ParsingFunctions.e25 }
                                                                                                                                                          GHC.Types.True
                                                                                                                                                          -> ParsingFunctions.e24 }
                                                                                                                                                     GHC.Types.True
                                                                                                                                                     -> ParsingFunctions.d15 }
                                                                                                                                                GHC.Types.True
                                                                                                                                                -> ParsingFunctions.e23 }
                                                                                                                                           GHC.Types.True
                                                                                                                                           -> ParsingFunctions.e22 }
                                                                                                                                      GHC.Types.True
                                                                                                                                      -> ParsingFunctions.e21 }
                                                                                                                                 GHC.Types.True
                                                                                                                                 -> BasicDerivatives.loga
                                                                                                                                      a }
                                                                                                                            GHC.Types.True
                                                                                                                            -> ParsingFunctions.e20 }
                                                                                                                       GHC.Types.True
                                                                                                                       -> ParsingFunctions.d20 }
                                                                                                                  GHC.Types.True
                                                                                                                  -> ParsingFunctions.e19 }
                                                                                                             GHC.Types.True
                                                                                                             -> ParsingFunctions.e18 }
                                                                                                        GHC.Types.True
                                                                                                        -> ParsingFunctions.e17 }
                                                                                                   GHC.Types.True
                                                                                                   -> ParsingFunctions.e16 }
                                                                                              GHC.Types.True
                                                                                              -> ParsingFunctions.d25 }
                                                                                         GHC.Types.True
                                                                                         -> ParsingFunctions.d24 }
                                                                                    GHC.Types.True
                                                                                    -> ParsingFunctions.e15 }
                                                                               GHC.Types.True
                                                                               -> ParsingFunctions.e14 }
                                                                          GHC.Types.True
                                                                          -> ParsingFunctions.e13 }
                                                                     GHC.Types.True
                                                                     -> ParsingFunctions.e12 }
                                                                GHC.Types.True
                                                                -> ParsingFunctions.e11 }
                                                           GHC.Types.True -> ParsingFunctions.e10 }
                                                      GHC.Types.True -> ParsingFunctions.e9 }
                                                 GHC.Types.True -> ParsingFunctions.e8 }
                                            GHC.Types.True -> ParsingFunctions.e7 }
                                       GHC.Types.True -> ParsingFunctions.e6 }
                                  GHC.Types.True -> ParsingFunctions.e5 }
                             GHC.Types.True -> ParsingFunctions.e4 }
                        GHC.Types.True -> BasicDerivatives.aToX a }
                   GHC.Types.True
                   -> let {
                        lvl4 :: GHC.Types.Double
                        = case Text.Read.readEither6
                                 @ GHC.Types.Double
                                 (Text.ParserCombinators.ReadP.run
                                    @ GHC.Types.Double
                                    ParsingFunctions.e3
                                    f) of wild1 {
                            [] -> ParsingFunctions.e2
                            : x ds
                            -> case ds of wild2 { [] -> x : ipv ipv1 -> ParsingFunctions.e1 } }
                      } in
                      let {
                        lvl5 :: GHC.Base.Maybe GHC.Types.Double
                        = GHC.Base.Just @ GHC.Types.Double lvl4
                      } in
                      \ (ds :: GHC.Types.Double) -> lvl5 }) -}
d00feb27cb9f974dd69040bfd8045405
  e1 :: GHC.Types.Double
  {- Strictness: x -}
eff01c2f9cbe4447b8ac9626d89fe639
  e10 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasec ww1 }) -}
d17b09850a54a5aa2a3d485f8eb407e5
  e11 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasech ww1 }) -}
fc0cd3465b8d048e904c2fe91216e2a1
  e12 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasin' ww1 }) -}
1d4372f1050944871911c05fea216c15
  e13 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (GHC.Float.$fFloatingDouble_$casinh x)) -}
3767daae3d7ba246ad770b76e30b9dc5
  e14 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.atanDouble x)) -}
a575c2deb328ae671771da3915bfa9ad
  e15 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$watanh' ww1 }) -}
b7dac77c43bb74ca1a860072e902ab7d
  e16 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                (GHC.Prim.cosDouble# x1)
                                (GHC.Prim.sinDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
eee6cbd9df89967d3d08949553ad5c29
  e17 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                (GHC.Prim.coshDouble# x1)
                                (GHC.Prim.sinhDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
3a896ae9a93d336b83c58ca28e78c54b
  e18 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
46136d38ed347a0a36a7909cb902f3c6
  e19 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinhDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
1368d90b16f2c96ab4eeb2c6b5e8a187
  e2 :: GHC.Types.Double
  {- Strictness: x -}
297ee0c1af8f5ee3442109d96d8447d7
  e20 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.logDouble# x1 of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) } }) -}
4020e69a4db5de544a4abc5371e21da0
  e21 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.cosDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
0ac3e033dd6b750ad74170993026b9b0
  e22 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.coshDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.coshDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
cfbcc61168cdd1f7ad238490ee9cd083
  e23 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.sinDouble x)) -}
8fa525487161c4b3775df09d4fedd253
  e24 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (GHC.Types.D# (GHC.Prim.tanDouble# x1))
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
dcb30f605110051b2f6746ac2c3e6948
  e25 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.tanhDouble x)) -}
150efbd9adbdfdbfdc7dcd4ad09128e3
  e26 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (GHC.Types.D# (GHC.Prim.**## x1 x1)) } }) -}
dccfe1f887a948f9958aa0e779e7fa33
  e3 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: ((GHC.Read.$fReadDouble9
                    GHC.Read.$fReadDouble_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Double>_R)
                   @ GHC.Types.Double
                   (Text.Read.readEither5 @ GHC.Types.Double)) -}
7972c9e6371e74897e37403c8933bbdf
  e4 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacos' ww1 }) -}
c94b3fef4e2c1c90c34e6dae0a219090
  e5 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacosh' ww1 }) -}
ecc71d5e28c4ac4a7f5d8bebd0055935
  e6 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.atanDouble# wild2) })
                   GHC.Types.True -> BasicDerivatives.acot1 } }) -}
d00c38e9cb834843815dc0d20843ac2c
  e7 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacoth ww1 }) -}
73283bfe8fb50d4f4bb0519b584bdbb9
  e8 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacsc ww1 }) -}
c08f1ee3571596695976fb10c8051f47
  e9 :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         case GHC.Prim.logDouble#
                                (GHC.Prim.+##
                                   wild2
                                   (GHC.Prim.sqrtDouble#
                                      (GHC.Prim.+##
                                         1.0##
                                         (GHC.Prim.*## wild2 wild2)))) of wild3 { DEFAULT ->
                         GHC.Types.D# wild3 } })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
6463a7dd48ededd37d74ef23b655a709
  isNumber :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> ParsingFunctions.isNumber1
                   : x xs
                   -> case x of wild1 { GHC.Types.C# x1 ->
                      case x1 of wild2 {
                        DEFAULT -> ParsingFunctions.isNumber_isNumber' wild
                        '-'# -> ParsingFunctions.isNumber_isNumber' xs } } }) -}
e2ba2aa55bdafdcb39b1d762c77596d8
  isNumber1 :: GHC.Types.Bool
  {- Strictness: x -}
98a4784b8a9a9224d1a9d7fd3977c30e
  isNumber_isNumber' :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
dad23f4f5f08c1d81daa012f7a7f287c
  sign ::
    [GHC.Types.Char]
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Char])
                   (w1 :: GHC.Types.Double)
                   (w2 :: GHC.Types.Double) ->
                 case ParsingFunctions.$wsign w w1 w2 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

