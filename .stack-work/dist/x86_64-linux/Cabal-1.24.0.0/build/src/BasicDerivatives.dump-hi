
==================== FINAL INTERFACE ====================
2017-01-16 09:49:49.994165 UTC

interface calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ:BasicDerivatives 8001
  interface hash: ee2dedcc4eced4e29a4f47c26561ae85
  ABI hash: 857a0917d6805129d904585615d5649b
  export-list hash: 0f7b8b43f56912e4241cd2bfb4002737
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  BasicDerivatives.aToX
  BasicDerivatives.acos'
  BasicDerivatives.acosh'
  BasicDerivatives.acot
  BasicDerivatives.acoth
  BasicDerivatives.acsc
  BasicDerivatives.acsch
  BasicDerivatives.asec
  BasicDerivatives.asech
  BasicDerivatives.asin'
  BasicDerivatives.asinh'
  BasicDerivatives.atan'
  BasicDerivatives.atanh'
  BasicDerivatives.cos'
  BasicDerivatives.cosh'
  BasicDerivatives.cot
  BasicDerivatives.coth
  BasicDerivatives.csc
  BasicDerivatives.csch
  BasicDerivatives.daToX
  BasicDerivatives.dacos
  BasicDerivatives.dacosh
  BasicDerivatives.dacot
  BasicDerivatives.dacoth
  BasicDerivatives.dacsc
  BasicDerivatives.dacsch
  BasicDerivatives.dasec
  BasicDerivatives.dasech
  BasicDerivatives.dasin
  BasicDerivatives.dasinh
  BasicDerivatives.datan
  BasicDerivatives.datanh
  BasicDerivatives.dc
  BasicDerivatives.dcos
  BasicDerivatives.dcosh
  BasicDerivatives.dcot
  BasicDerivatives.dcoth
  BasicDerivatives.dcsc
  BasicDerivatives.dcsch
  BasicDerivatives.dexp
  BasicDerivatives.dlog
  BasicDerivatives.dloga
  BasicDerivatives.dsec
  BasicDerivatives.dsech
  BasicDerivatives.dsin
  BasicDerivatives.dsinh
  BasicDerivatives.dtan
  BasicDerivatives.dtanh
  BasicDerivatives.dxToN
  BasicDerivatives.dxToX
  BasicDerivatives.exp'
  BasicDerivatives.log'
  BasicDerivatives.loga
  BasicDerivatives.sec
  BasicDerivatives.sech
  BasicDerivatives.sin'
  BasicDerivatives.sinh'
  BasicDerivatives.takeMaybePM
  BasicDerivatives.takeMaybeTD
  BasicDerivatives.tan'
  BasicDerivatives.tanh'
  BasicDerivatives.xToN
  BasicDerivatives.xToX
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
1fae5b0bfef722b835ac918b15ba05f2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BasicDerivatives.$trModule2
                   BasicDerivatives.$trModule1) -}
8d46c54d8e9ba13cc25782c4fea25b4a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BasicDerivatives"#) -}
68e8a270ab4d2f6da2ca334a3e6ddef8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ"#) -}
20d1ca7af7de4786dc6f0fc2270e8e3c
  $wacos' :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.acosDouble# ww of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.acosDouble# ww of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.acosDouble# ww of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) }) -}
2c81c352b329802d1313965eaeb53089
  $wacosh' :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          (GHC.Prim.-## ww 1.0##)
                                          (GHC.Prim.+## ww 1.0##) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble#
                                          (GHC.Prim.+##
                                             ww
                                             (GHC.Prim.*##
                                                (GHC.Prim.+## ww 1.0##)
                                                (GHC.Prim.sqrtDouble# wild4))) of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          (GHC.Prim.-## ww 1.0##)
                                          (GHC.Prim.+## ww 1.0##) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble#
                                          (GHC.Prim.+##
                                             ww
                                             (GHC.Prim.*##
                                                (GHC.Prim.+## ww 1.0##)
                                                (GHC.Prim.sqrtDouble# wild4))) of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
c204129bddab96f02a368f7b03cde35b
  $wacoth :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim./##
                                          (GHC.Prim.+## 1.0## wild4)
                                          (GHC.Prim.-## 1.0## wild4) of wild5 { DEFAULT ->
                                   case GHC.Prim.logDouble# wild5 of wild6 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.*## 0.5## wild6) } } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim./##
                                          (GHC.Prim.+## 1.0## wild4)
                                          (GHC.Prim.-## 1.0## wild4) of wild5 { DEFAULT ->
                                   case GHC.Prim.logDouble# wild5 of wild6 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.*## 0.5## wild6) } } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
df91075893b2765c3dc284a7067ca6e6
  $wacsc :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim.asinDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim.asinDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
3024d0b4efec0524919804108f3826ad
  $wasec :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim.acosDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild4 { DEFAULT ->
                                   case GHC.Prim.acosDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
412cf9915fbd870cb9f3f8f58b3c49d4
  $wasech :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild3 { DEFAULT ->
                                   case GHC.Prim./##
                                          (GHC.Prim.-## wild3 1.0##)
                                          (GHC.Prim.+## wild3 1.0##) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble#
                                          (GHC.Prim.+##
                                             wild3
                                             (GHC.Prim.*##
                                                (GHC.Prim.+## wild3 1.0##)
                                                (GHC.Prim.sqrtDouble# wild4))) of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./## 1.0## ww of wild3 { DEFAULT ->
                                   case GHC.Prim./##
                                          (GHC.Prim.-## wild3 1.0##)
                                          (GHC.Prim.+## wild3 1.0##) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble#
                                          (GHC.Prim.+##
                                             wild3
                                             (GHC.Prim.*##
                                                (GHC.Prim.+## wild3 1.0##)
                                                (GHC.Prim.sqrtDouble# wild4))) of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
916bface74a4152e41a31a26747ae73c
  $wasin' :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.asinDouble# ww of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.asinDouble# ww of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.asinDouble# ww of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) }) -}
0b0a4c67d319128ab6860f40bfd90506
  $watanh' :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          (GHC.Prim.+## 1.0## ww)
                                          (GHC.Prim.-## 1.0## ww) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.*## 0.5## wild5) } }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          (GHC.Prim.+## 1.0## ww)
                                          (GHC.Prim.-## 1.0## ww) of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble# wild4 of wild5 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.*## 0.5## wild5) } }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                (GHC.Prim.+## 1.0## ww)
                                (GHC.Prim.-## 1.0## ww) of wild2 { DEFAULT ->
                         case GHC.Prim.logDouble# wild2 of wild3 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.*## 0.5## wild3) } }) }) -}
9dbd6ddacfefcba17e125693d19d65cb
  $wdacos :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                1.0##
                                                (GHC.Prim.*## ww ww))) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                1.0##
                                                (GHC.Prim.*## ww ww))) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sqrtDouble#
                                   (GHC.Prim.-## 1.0## (GHC.Prim.*## ww ww))) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# wild2) }) }) -}
23868db01154a538cfb5ddbd9722358f
  $wdacosh :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                (GHC.Prim.*## ww ww)
                                                1.0##)) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                (GHC.Prim.*## ww ww)
                                                1.0##)) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
7c0b5ec9071f77275df13b6f23ed52e3
  $wdacoth :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.-##
                                             (GHC.Prim.*## ww ww)
                                             1.0##) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.-##
                                             (GHC.Prim.*## ww ww)
                                             1.0##) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
e519c5934233aafa4f36f7b07577a1f1
  $wdacsc :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## ww ww)
                                                   1.0##))) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## ww ww)
                                                   1.0##))) of wild4 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild4) }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
c429afd148928105620ac12a58d63a76
  $wdasec :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## ww ww)
                                                   1.0##))) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## ww ww)
                                                   1.0##))) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
92fd6f33cb8ce346bea131fa0125a9ea
  $wdasech :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   1.0##
                                                   (GHC.Prim.*## ww ww)))) of wild3 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild3) }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*##
                                             ww
                                             (GHC.Prim.sqrtDouble#
                                                (GHC.Prim.-##
                                                   1.0##
                                                   (GHC.Prim.*## ww ww)))) of wild3 { DEFAULT ->
                                   GHC.Types.D# (GHC.Prim.negateDouble# wild3) }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
b28504e9a9c50db398a2d8756e855590
  $wdasin :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                1.0##
                                                (GHC.Prim.*## ww ww))) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.sqrtDouble#
                                             (GHC.Prim.-##
                                                1.0##
                                                (GHC.Prim.*## ww ww))) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sqrtDouble#
                                   (GHC.Prim.-## 1.0## (GHC.Prim.*## ww ww))) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) }) -}
b1aae5be88dceb1ba78c3d8fcea3914e
  $wdatanh :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>## ww 0.0##) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## (GHC.Prim.negateDouble# ww) 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.-##
                                             1.0##
                                             (GHC.Prim.*## ww ww)) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<## ww 1.0##) of wild {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.-##
                                             1.0##
                                             (GHC.Prim.*## ww ww)) of wild4 { DEFAULT ->
                                   GHC.Types.D# wild4 }) } }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.-## 1.0## (GHC.Prim.*## ww ww)) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) }) -}
262023ca641ed2dc78720e4722914c46
  $wdcot :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# ww) 0.0##) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinDouble# ww) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# (GHC.Prim.*## wild2 wild2)) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
ad4bcbac62c8cb17bc70f0b25ab12431
  $wdcoth :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# ww) 0.0##) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinhDouble# ww) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# (GHC.Prim.*## wild2 wild2)) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
04b025fa903cadcd43ca49c56adb3776
  $wdcsch :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# ww) 0.0##) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinhDouble# ww) of wild2 { DEFAULT ->
                         case GHC.Prim./##
                                (GHC.Prim.coshDouble# ww)
                                (GHC.Prim.sinhDouble# ww) of wild1 { DEFAULT ->
                         GHC.Types.D#
                           (GHC.Prim.negateDouble# (GHC.Prim.*## wild2 wild1)) } })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
7b7ce6100fc1dad9fb799b8e61c77980
  $wdloga ::
    GHC.Prim.Double#
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) (w :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=## ww 0.0##) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww 1.0##) of wild1 {
                        GHC.Types.False
                        -> case w of wild2 { GHC.Types.D# x ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## x 0.0##) of wild3 {
                             GHC.Types.False
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.logDouble# ww of wild4 { DEFAULT ->
                                   case GHC.Prim./##
                                          1.0##
                                          (GHC.Prim.*## x wild4) of wild5 { DEFAULT ->
                                   GHC.Types.D# wild5 } })
                             GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
3d57f550a1486dc72fd88b5d6fdd2471
  $wdsech :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.coshDouble# ww) 0.0##) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.coshDouble# ww) of wild2 { DEFAULT ->
                         GHC.Types.D#
                           (GHC.Prim.negateDouble#
                              (GHC.Prim.*## wild2 (GHC.Prim.tanhDouble# ww))) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
708e274342a02741dc58d7aa61690df0
  $wdtan :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# ww) 0.0##) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.cosDouble# ww) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.*## wild2 wild2) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double }) -}
179153372d82e8d0525bbe7914089432
  $wloga ::
    GHC.Prim.Double#
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) (w :: GHC.Types.Double) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## ww 0.0##) of wild {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww 1.0##) of wild1 {
                        GHC.Types.False
                        -> case w of wild2 { GHC.Types.D# x ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>## x 0.0##) of wild3 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Double
                                  (case GHC.Prim.logDouble# x of wild4 { DEFAULT ->
                                   case GHC.Prim.logDouble# ww of wild5 { DEFAULT ->
                                   case GHC.Prim./## wild4 wild5 of wild6 { DEFAULT ->
                                   GHC.Types.D# wild6 } } }) } }
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
add10ddae0cd81b9e2798e08fa9a162a
  aToX ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case a of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x1 1.0##) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ GHC.Types.Double
                             (case x of wild3 { GHC.Types.D# y ->
                              GHC.Types.D# (GHC.Prim.**## x1 y) })
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } } }) -}
63df19505514b5bb3cec93441754eb0d
  acos' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacos' ww1 }) -}
b4e22173c324ddaedc5bfcfe45bf5d03
  acosh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacosh' ww1 }) -}
ff48d0e535a1b49c22d5892f8a602582
  acot ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.atanDouble# wild2) })
                   GHC.Types.True -> BasicDerivatives.acot1 } }) -}
503c6a47349c62d1f23de73bb0e78bcb
  acot1 :: GHC.Base.Maybe GHC.Types.Double
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Double
                   BasicDerivatives.acot2) -}
0ea3d3ba8e4013715298250a151e0fed
  acot2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 1.5707963267948966##) -}
466d91a1e166bc627e46d9b325999e54
  acoth ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacoth ww1 }) -}
545d3fbc0c990d06f98c3e31932c33d4
  acsc ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wacsc ww1 }) -}
f6896668d3b8bfcb4c98d621bfee0ddf
  acsch ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         case GHC.Prim.logDouble#
                                (GHC.Prim.+##
                                   wild2
                                   (GHC.Prim.sqrtDouble#
                                      (GHC.Prim.+##
                                         1.0##
                                         (GHC.Prim.*## wild2 wild2)))) of wild3 { DEFAULT ->
                         GHC.Types.D# wild3 } })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
51eae852c1d33c7106343dca6a4a190c
  asec ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasec ww1 }) -}
0ed933906a65a3788664b5f6a56df552
  asech ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasech ww1 }) -}
fbca9cd467f913ede5f832abc0c34676
  asin' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wasin' ww1 }) -}
2f9d14bb1fea4f46c35e7f6bceab6f17
  asinh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (GHC.Float.$fFloatingDouble_$casinh x)) -}
11aed03bc73bde5d535acf86d1b096f8
  atan' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.atanDouble x)) -}
2265e5135381148d51501d8d19255963
  atanh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$watanh' ww1 }) -}
f3a4e8fa0a8abd6877a3b4f216c5ed94
  cos' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.cosDouble x)) -}
35516a6742bfc411ef52bddf24e77d9c
  cosh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.coshDouble x)) -}
5d037efdd607af6b161fcc75a8273251
  cot ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                (GHC.Prim.cosDouble# x1)
                                (GHC.Prim.sinDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
8096c18a76936c5e9ae0ecc092acb875
  coth ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                (GHC.Prim.coshDouble# x1)
                                (GHC.Prim.sinhDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
eba81120de69ea5800673c15ac820724
  csc ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
badf41bf30903cd42d2c198301ea8362
  csch ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinhDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.sinhDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
ab91c8c5d94404a5a2166221df97b25e
  daToX ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## ww1 0.0##) of wild {
                   GHC.Types.False -> BasicDerivatives.daToX1
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww1 1.0##) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ GHC.Types.Double
                             (case w1 of wild2 { GHC.Types.D# y ->
                              case GHC.Prim.logDouble# ww1 of wild3 { DEFAULT ->
                              GHC.Types.D# (GHC.Prim.*## (GHC.Prim.**## ww1 y) wild3) } })
                        GHC.Types.True -> BasicDerivatives.daToX1 } } }) -}
cb528ab8b6276672ca0c4b06464e1a88
  daToX1 :: GHC.Base.Maybe GHC.Types.Double
  {- Strictness: x -}
d8b7e81dbd781eafc4078b240de11e2a
  dacos ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacos ww1 }) -}
0f6736ae7fb4498d6e0c880add97386b
  dacosh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacosh ww1 }) -}
00758ed4c223a3bf7e8a78511e790beb
  dacot ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1)) of wild2 { DEFAULT ->
                    GHC.Types.D# (GHC.Prim.negateDouble# wild2) } })) -}
bcf96e5d9acae6e831db6ec909723c62
  dacoth ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacoth ww1 }) -}
bd4154254167cf9a2fb454327d1588a0
  dacsc ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdacsc ww1 }) -}
95b6addd4bdc0436a6b03d11ebc8864b
  dacsch ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.*##
                                   x1
                                   (GHC.Prim.sqrtDouble#
                                      (GHC.Prim.+##
                                         1.0##
                                         (GHC.Prim.*## x1 x1)))) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# wild2) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
6e724fea62c807cacf0e654df5729a60
  dasec ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasec ww1 }) -}
cbe22e3ddde53e66a2c594e34e7de419
  dasech ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasech ww1 }) -}
893be7f295b1167aec6d5aba8b5de893
  dasin ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdasin ww1 }) -}
ebe127a70e6b8db930877878779ea650
  dasinh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.sqrtDouble#
                              (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1))) of wild2 { DEFAULT ->
                    GHC.Types.D# wild2 } })) -}
107a1dcb123e955d61901e43bd7d3c82
  datan ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    case GHC.Prim./##
                           1.0##
                           (GHC.Prim.+## 1.0## (GHC.Prim.*## x1 x1)) of wild2 { DEFAULT ->
                    GHC.Types.D# wild2 } })) -}
9aee0ce50209182abceb7c87ab7f3b49
  datanh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdatanh ww1 }) -}
c57c80c534b1ebc1dc10518f38b3b58e
  dc ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: GHC.Types.Double) (ds1 :: GHC.Types.Double) ->
                 BasicDerivatives.dc1) -}
a725e6d8fbce6aab748e39fab11aef1e
  dc1 :: GHC.Base.Maybe GHC.Types.Double
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Double
                   BasicDerivatives.dc2) -}
6c153c057fd501b4c6b453b3681fc12f
  dc2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
75aa2eb2cf6a1a01fe844f6f77d66a65
  dcos ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case x of wild { GHC.Types.D# x1 ->
                    GHC.Types.D#
                      (GHC.Prim.negateDouble# (GHC.Prim.sinDouble# x1)) })) -}
ce7950d88aa458d6dddea17bdfedeb48
  dcosh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.sinhDouble x)) -}
a1e8c16d2fdd9ae16ffc6cdeb2e718e5
  dcot ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcot ww1 }) -}
92cd5c06f667ef8593e2c4bb09710dd1
  dcoth ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcoth ww1 }) -}
5371b43d8870f3bcc629b73fa93ab3b4
  dcsc ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.sinDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (let {
                           x2 :: GHC.Prim.Double# = GHC.Prim.sinDouble# x1
                         } in
                         case GHC.Prim./##
                                (GHC.Prim.cosDouble# x1)
                                (GHC.Prim.*## x2 x2) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.negateDouble# wild2) })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
fa8b17a67e6d2a9627a147624c1a788d
  dcsch ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdcsch ww1 }) -}
0b1d2aa7e48dfa051bb716fdd2998449
  dexp ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.expDouble x)) -}
3237ba1a131a17b714630ed563dc902a
  dlog ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./## 1.0## x1 of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) } }) -}
655c90ca8d593730293f186ad4ecbce3
  dloga ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdloga ww1 w1 }) -}
f0019888ccb6e6c5bca159ec1a8c0213
  dsec ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (let {
                           x2 :: GHC.Prim.Double# = GHC.Prim.cosDouble# x1
                         } in
                         case GHC.Prim./##
                                (GHC.Prim.sinDouble# x1)
                                (GHC.Prim.*## x2 x2) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
5fa5a757799fed1c2f47864e565cefb6
  dsech ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdsech ww1 }) -}
2e1613d330a5a28dce3ff5081f8abc29
  dsin ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.cosDouble x)) -}
40399d60158f78d52c549bb9d4208624
  dsinh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.coshDouble x)) -}
49990bbac8cdfbab9b80a86ee8225783
  dtan ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wdtan ww1 }) -}
de56c74989a30410cd17a520f55e29ee
  dtanh ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case w1 of wild { GHC.Types.D# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.==## (GHC.Prim.coshDouble# x) 0.0##) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim./##
                                1.0##
                                (GHC.Prim.coshDouble# x) of wild2 { DEFAULT ->
                         GHC.Types.D# (GHC.Prim.*## wild2 wild2) }
                      GHC.Types.True -> GHC.Types.D# 0.0## } })) -}
db7112b49f7ead1e31d2a91af0af8296
  dxToN ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just
                   @ GHC.Types.Double
                   (case n of wild { GHC.Types.D# x1 ->
                    case x of wild1 { GHC.Types.D# x2 ->
                    GHC.Types.D#
                      (GHC.Prim.*##
                         x1
                         (GHC.Prim.**## x2 (GHC.Prim.-## x1 1.0##))) } })) -}
476fa3d400e8a514c64dbb698f1ebedf
  dxToX ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.logDouble# x1 of wild2 { DEFAULT ->
                         GHC.Types.D#
                           (GHC.Prim.*##
                              (GHC.Prim.**## x1 x1)
                              (GHC.Prim.+## 1.0## wild2)) }) } }) -}
401805c869eae33a9062b02f04bc4054
  exp' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.expDouble x)) -}
9536904f3534ea74a0160d3191c65ef1
  log' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim.logDouble# x1 of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 }) } }) -}
8647a80415fed3a9029e64ab2b77efbc
  loga ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 BasicDerivatives.$wloga ww1 w1 }) -}
4e4dd3d88ee412cdb4421fce57d0b6a2
  sec ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.cosDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
59ccf5b8f9ab16fb3f210462f1994a6f
  sech ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.coshDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (case GHC.Prim./##
                                1.0##
                                (GHC.Prim.coshDouble# x1) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 })
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
cdc3c93fbcd751a44721285014f9677a
  sin' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.sinDouble x)) -}
fb4e8ef8f491041ad1905d8d14d9c334
  sinh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.sinhDouble x)) -}
4378277357bcdf8b8fa52f4693fc69cb
  takeMaybePM :: GHC.Base.Maybe GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Double) ->
                 case ds of wild {
                   GHC.Base.Nothing -> BasicDerivatives.dc2 GHC.Base.Just x -> x }) -}
29013c59a7deef276782cbcc0e3bbe0c
  takeMaybeTD :: GHC.Base.Maybe GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Double) ->
                 case ds of wild {
                   GHC.Base.Nothing -> BasicDerivatives.takeMaybeTD1
                   GHC.Base.Just x -> x }) -}
e2bd5a85244b034d05b45753307a4a34
  takeMaybeTD1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
691bac2138d53096a75a8ad11430ff7c
  tan' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## (GHC.Prim.cosDouble# x1) 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (GHC.Types.D# (GHC.Prim.tanDouble# x1))
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Double } }) -}
d4dd552afca99b06a923222116eeb83f
  tanh' ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.tanhDouble x)) -}
93ea061bb2b9b780a140e05d3e0ede77
  xToN ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 GHC.Base.Just @ GHC.Types.Double (GHC.Float.powerDouble x n)) -}
ee85c540a0dec9261c48b441e6a1b0d0
  xToX ::
    GHC.Types.Double
    -> GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Double) (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## x1 0.0##) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Double
                        (GHC.Types.D# (GHC.Prim.**## x1 x1)) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

