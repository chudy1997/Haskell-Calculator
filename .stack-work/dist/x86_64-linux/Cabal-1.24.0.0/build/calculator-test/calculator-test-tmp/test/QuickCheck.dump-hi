
==================== FINAL INTERFACE ====================
2017-01-17 16:22:42.496828 UTC

interface main@main:QuickCheck 8001
  interface hash: aa67cee7c719823684f980ebb4ffe313
  ABI hash: 57fada7a78478194c62139d1e001bace
  export-list hash: 79a6104d4c800de82d9957ad2ad06b70
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b5ca19cfe7364bb4447f79fe37f7f9ad
  sig of: Nothing
  used TH splices: False
  where
exports:
  QuickCheck.dexpTest
  QuickCheck.dsinTest
  QuickCheck.expTest
  QuickCheck.sinTest
  QuickCheck.takeMaybePMTest
  QuickCheck.takeMaybeTDTest
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      calculator-0.1.0.0@calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck a3636f7c6b928d0bf1ca94109fdc4fa1
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  calculator-0.1.0.0@calculator-0.1.0.0-8Tet1wOxGuGSNWb8A2YaZ:BasicDerivatives 857a0917d6805129d904585615d5649b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
da021c3166767151360d0018360c744b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   QuickCheck.$trModule2
                   QuickCheck.$trModule1) -}
18db5b0b1ccedd09a555f63b7e417816
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "QuickCheck"#) -}
56dc636289804b158bb67b35370a2ea8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
25f05a5e8a782d6e15f1351081ec6b51
  dexpTest :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==##
                      (GHC.Prim.expDouble# x1)
                      (GHC.Prim.expDouble# x1)) }) -}
1dbdce7dff58aa97818237a4dc54bcd9
  dsinTest :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==##
                      (GHC.Prim.cosDouble# x1)
                      (GHC.Prim.cosDouble# x1)) }) -}
4f7c91ceddfbe154c52734a39dba2f49
  expTest :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==##
                      (GHC.Prim.expDouble# x1)
                      (GHC.Prim.expDouble# x1)) }) -}
b3226e2b227762fc9bdfda7accaba8f8
  sinTest :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==##
                      (GHC.Prim.sinDouble# x1)
                      (GHC.Prim.sinDouble# x1)) }) -}
ed0af7edd48bfcd278c84030a3d3c379
  takeMaybePMTest ::
    GHC.Base.Maybe GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Double) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just x -> GHC.Classes.eqDouble x x }) -}
c4ef73d12454286c394640343a0e820a
  takeMaybeTDTest ::
    GHC.Base.Maybe GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Double) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just x -> GHC.Classes.eqDouble x x }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

